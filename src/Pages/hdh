import sys
input = sys.stdin.read

class FenwickTree:
    def _init_(self, size):
        self.size = size
        
        self.tree = [0] * (size + 1)
        
    def update(self, index, delta):
        while index <= self.size:
            self.tree[index] += delta
            index += index & -index
    
    def query(self, index):
        sum = 0
        while index > 0:
            sum += self.tree[index]
            index -= index & -index
        return sum
    
    def range_query(self, left, right):
        return self.query(right) - self.query(left - 1)

def solve(N, Q, A, queries):
    # Initialize Fenwick Tree for point updates
    fenwick_tree = FenwickTree(N)
    
    # Initialize the Fenwick Tree with the array values
    for i in range(1, N + 1):
        fenwick_tree.update(i, A[i - 1])
    
    results = []
    
    for query in queries:
        if query[0] == 1:
            # Update query
            _, i, val = query
            current_val = fenwick_tree.range_query(i, i)
            delta = val - current_val
            fenwick_tree.update(i, delta)
            A[i - 1] = val  # Update the array value for consistency
        elif query[0] == 2:
            # Sum query
            _, L, R = query
            total_sum = 0
            prefix_sum = [0] * (N + 1)
            for k in range(1, N + 1):
                prefix_sum[k] = prefix_sum[k - 1] + A[k - 1]
            
            for i in range(L, R + 1):
                for j in range(i, R + 1):
                    total_sum += prefix_sum[j] - prefix_sum[i - 1]
            results.append(total_sum)
    
    return results

# Read input
data = input().strip().split()
index = 0
T = int(data[index])
index += 1
results = []

for _ in range(T):
    N = int(data[index])
    index += 1
    Q = int(data[index])
    index += 1
    A = list(map(int, data[index:index + N]))
    index += N
    queries = []
    for _ in range(Q):
        queries.append(tuple(map(int, data[index:index + 3])))
        index += 3
    
    # Solve and collect results
    result = solve(N, Q, A, queries)
    results.append(result)

# Print all results for each test case
for result in results:
    print(' '.join(map(str, result)))